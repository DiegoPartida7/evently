.container
  %h1.mt-5.mb-5.text-center.text-white
    Eventos

  %article.card
    %header.card-header 
      Disponibles
    .card-body
      .row
        -Event.where(event_type: 'Open').each do |event|
          .col-md-3.text-center
            %figure.card.card-product-grid.mb-3
              .img-wrap
                -if event.image.attached?
                  = image_tag event.image, class: 'img-cover'

              %figcaption.info-wrap
                %a.title.text-truncate{:href => "#"}
                  #{event.title}
                %p.price.mb-2 
                  Precio: #{number_to_currency(event.price)}
                %a.btn.btn-primary.btn-sm{:href => event_path(event.id), style:"width:100%;"} Ver Evento
                -# %a.btn.btn-danger.btn-sm{"data-toggle" => "tooltip", :href => "#", :title => "Remove from wishlist"}
                -#   %i.fa.fa-times



.wrapper
  .container
    %h1 jQuery Seat Charts Plugin Demo
    #seat-map
      .front-indicator Front
    .booking-details
      %h2 Booking Details
      %h3
        Selected Seats (
        %span#counter> 0
        ):
      %ul#selected-seats
      Total:
      %b
        $
        %span#total 0
      %button.checkout-button Checkout Â»
      #legend

:javascript
  var firstSeatLabel = 1;

  $(document).ready(function() {
    var $cart = $('#selected-seats'),
      $counter = $('#counter'),
      $total = $('#total'),
      sc = $('#seat-map').seatCharts({
      map: [
        'ff_ff',
        'ff_ff',
        'ee_ee',
        'ee_ee',
        'ee___',
        'ee_ee',
        'ee_ee',
        'ee_ee',
        'eeeee',
      ],
      seats: {
        f: {
          price   : 100,
          classes : 'first-class', //your custom CSS class
          category: 'First Class'
        },
        e: {
          price   : 40,
          classes : 'economy-class', //your custom CSS class
          category: 'Economy Class'
        }         
      
      },
      naming: {
        top : false,
        getLabel : function (character, row, column) {
          return firstSeatLabel++;
        },
      },
      legend: {
        node: $('#legend'),
          items : [
          [ 'f', 'available',   'First Class' ],
          [ 'e', 'available',   'Economy Class'],
          [ 'f', 'unavailable', 'Already Booked']
          ]         
      },
      click: function () {
        if (this.status() == 'available') {
          //let's create a new <li> which we'll add to the cart items
          $('<li>'+this.data().category+' Seat # '+this.settings.label+': <b>$'+this.data().price+'</b> <a href="#" class="cancel-cart-item">[cancel]</a></li>')
            .attr('id', 'cart-item-'+this.settings.id)
            .data('seatId', this.settings.id)
            .appendTo($cart);
          
          /*
          * Lets up<a href="https://www.jqueryscript.net/time-clock/">date</a> the counter and total
          *
          * .find function will not find the current seat, because it will change its stauts only after return
          * 'selected'. This is why we have to add 1 to the length and the current seat price to the total.
          */
          $counter.text(sc.find('selected').length+1);
          $total.text(recalculateTotal(sc)+this.data().price);
          
          return 'selected';
        } else if (this.status() == 'selected') {
          //update the counter
          $counter.text(sc.find('selected').length-1);
          //and total
          $total.text(recalculateTotal(sc)-this.data().price);
        
          //remove the item from our cart
          $('#cart-item-'+this.settings.id).remove();
        
          //seat has been vacated
          return 'available';
        } else if (this.status() == 'unavailable') {
          //seat has been already booked
          return 'unavailable';
        } else {
          return this.style();
        }
      }
    });

    //this will handle "[cancel]" link clicks
    $('#selected-seats').on('click', '.cancel-cart-item', function () {
      //let's just trigger Click event on the appropriate seat, so we don't have to repeat the logic here
      sc.get($(this).parents('li:first').data('seatId')).click();
    });

    //let's pretend some seats have already been booked
    sc.get(['1_2', '4_1', '7_1', '7_2']).status('unavailable');

  });

  function recalculateTotal(sc) {
    var total = 0;

    //basically find every selected seat and sum its price
    sc.find('selected').each(function () {
      total += this.data().price;
    });
    
    return total;
  }

  // requires <a href="https://www.jqueryscript.net/tags.php?/jQuery UI/">jQuery UI</a>
  animate : false, 

  // specify your own column and row labels as well as functions for generating seat ids and labels
  naming: {
    top    : true,
    left   : true,
    getId  : function(character, row, column) {
      return row + '_' + column;
    },
    getLabel : function (character, row, column) {
      return column;
    }
    
  },

  // custom legend
  legend : {
    node   : null,
    items  : []
  },

  // click function
  click   : function() {

    if (this.status() == 'available') {
      return 'selected';
    } else if (this.status() == 'selected') {
      return 'available';
    } else {
      return this.style();
    }
    
  },

  // focus function
  focus  : function() {

    if (this.status() == 'available') {
      return 'focused';
    } else  {
      return this.style();
    }
  },

  // blur function
  blur   : function() {
    return this.status();
  },

  // seat map definition
  seats   : {}


